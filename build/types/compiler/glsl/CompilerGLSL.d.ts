import { Compiler } from "../Compiler";
import { ParsedIR } from "../../parser/ParsedIR";
import { LocationComponentPair } from "../../common/LocationComponentPair";
import { BuiltIn, ExecutionModel, ImageFormat, StorageClass } from "../../spirv";
import { Pair } from "../../utils/Pair";
import { SPIRVariable } from "../../common/SPIRVariable";
import { SPIRType, SPIRTypeBaseType } from "../../common/SPIRType";
import { BackendVariations, GLSLstd450 } from "./glsl";
import { PlsRemap } from "./PlsRemap";
import { GLSLOptions } from "./GLSLOptions";
import { SPIRFunction, SPIRFunctionParameter } from "../../common/SPIRFunction";
import { StringStream } from "../../utils/StringStream";
import { SPIRExpression } from "../../common/SPIRExpression";
import { SPIRConstant } from "../../common/SPIRConstant";
import { Bitset } from "../../common/Bitset";
import { Dict } from "../../utils/Dict";
import { SPIRConstantOp } from "../../common/SPIRConstantOp";
import { AccessChainMeta } from "../../common/AccessChainMeta";
import { BufferPackingStandard } from "../BufferPackingStandard";
import { SPIRBlock, SPIRBlockMethod } from "../../common/SPIRBlock";
import { Instruction } from "../../common/Instruction";
import { TextureFunctionArguments, TextureFunctionNameArguments } from "./TextureFunctionArguments";
declare type AccessChainFlags = number;
export declare class CompilerGLSL extends Compiler {
    protected current_emitting_block: SPIRBlock;
    protected current_emitting_switch: SPIRBlock;
    protected current_emitting_switch_fallthrough: boolean;
    protected buffer: StringStream;
    protected redirect_statement: string[];
    protected current_continue_block: SPIRBlock;
    protected options: GLSLOptions;
    protected local_variable_names: Set<string>;
    protected resource_names: Set<string>;
    protected block_input_names: Set<string>;
    protected block_output_names: Set<string>;
    protected block_ubo_names: Set<string>;
    protected block_ssbo_names: Set<string>;
    protected block_names: Set<string>;
    protected function_overloads: Dict<Set<bigint>>;
    protected preserved_aliases: string[];
    protected processing_entry_point: boolean;
    protected backend: BackendVariations;
    protected indent: number;
    protected flushed_phi_variables: Set<number>;
    protected flattened_buffer_blocks: Set<number>;
    protected flattened_structs: boolean[];
    protected expression_usage_counts: number[];
    protected forced_extensions: string[];
    protected header_lines: string[];
    protected extra_sub_expressions: number[];
    protected workaround_ubo_load_overload_types: TypeID[];
    protected statement_count: number;
    protected requires_transpose_2x2: boolean;
    protected requires_transpose_3x3: boolean;
    protected requires_transpose_4x4: boolean;
    protected pls_inputs: PlsRemap[];
    protected pls_outputs: PlsRemap[];
    protected subpass_to_framebuffer_fetch_attachment: Pair<number, number>[];
    protected inout_color_attachments: Pair<number, boolean>[];
    protected masked_output_locations: Set<LocationComponentPair>;
    protected masked_output_builtins: Set<number>;
    constructor(parsedIR: ParsedIR);
    remap_pixel_local_storage(inputs: PlsRemap[], outputs: PlsRemap[]): void;
    remap_ext_framebuffer_fetch(input_attachment_index: number, color_location: number, coherent: boolean): void;
    get_common_options(): GLSLOptions;
    require_extension(ext: string): void;
    flatten_buffer_block(id: VariableID): void;
    mask_stage_output_by_location(location: number, component: number): void;
    mask_stage_output_by_builtin(builtin: BuiltIn): void;
    protected reset(): void;
    protected emit_function_prototype(func: SPIRFunction, return_flags: Bitset): void;
    protected emit_function(func: SPIRFunction, return_flags: Bitset): void;
    protected has_extension(ext: string): boolean;
    protected require_extension_internal(ext: string): void;
    protected emit_block_instructions(block: SPIRBlock): void;
    emit_instruction(instruction: Instruction): void;
    protected emit_header(): void;
    protected emit_texture_op(i: Instruction, sparse: boolean): void;
    protected to_texture_op(i: Instruction, sparse: boolean, forward: {
        value: boolean;
    }, inherited_expressions: number[]): string;
    protected emit_line_directive(file_id: number, line_literal: number): void;
    protected emit_struct_member(type: SPIRType, member_type_id: number, index: number, qualifier?: string, base_offset?: number): void;
    protected emit_struct_padding_target(_: SPIRType): void;
    protected to_function_name(args: TextureFunctionNameArguments): string;
    protected to_function_args(args: TextureFunctionArguments, p_forward: {
        value: boolean;
    }): string;
    protected emit_sparse_feedback_temporaries(result_type_id: number, id: number, ids: {
        sparse_code_id: number;
        sparse_texel_id: number;
    }): void;
    protected get_sparse_feedback_texel_id(id: number): number;
    protected emit_buffer_block(var_: SPIRVariable): void;
    protected emit_push_constant_block(var_: SPIRVariable): void;
    protected emit_buffer_block_legacy(var_: SPIRVariable): void;
    protected emit_buffer_block_flattened(var_: SPIRVariable): void;
    protected emit_flattened_io_block(var_: SPIRVariable, qual: string): void;
    protected emit_flattened_io_block_struct(basename: string, type: SPIRType, qual: string, indices: number[]): void;
    protected emit_flattened_io_block_member(basename: string, type: SPIRType, qual: string, indices: number[]): void;
    protected emit_block_chain(block: SPIRBlock): void;
    protected emit_hoisted_temporaries(temporaries: Pair<TypeID, ID>[]): void;
    protected emit_uniform(var_: SPIRVariable): void;
    protected unpack_expression_type(expr_str: string, _0: SPIRType, _1: number, _2: boolean, _3: boolean): string;
    protected builtin_translates_to_nonarray(_: BuiltIn): boolean;
    protected statement_inner(...args: any[]): void;
    protected type_to_glsl(type: SPIRType, id?: number): string;
    builtin_to_glsl(builtin: BuiltIn, storage: StorageClass): string;
    protected image_type_glsl(type: SPIRType, id?: number): string;
    constant_expression(c: SPIRConstant): string;
    constant_op_expression(cop: SPIRConstantOp): string;
    protected constant_expression_vector(c: SPIRConstant, vector: number): string;
    protected statement(...args: any[]): void;
    protected statement_no_indent(...args: any[]): void;
    protected begin_scope(): void;
    protected end_scope(trailer?: string): void;
    protected end_scope_decl(decl?: string): void;
    protected add_resource_name(id: number): void;
    protected add_local_variable_name(id: number): void;
    protected add_member_name(type: SPIRType, index: number): void;
    protected type_to_array_glsl(type: SPIRType): string;
    protected add_function_overload(func: SPIRFunction): void;
    protected to_array_size(type: SPIRType, index: number): string;
    protected to_array_size_literal(type: SPIRType, index?: number): number;
    protected emit_fixup(): void;
    protected variable_decl(type: SPIRType, name: string, id?: number): any;
    protected variable_decl(variable: SPIRVariable): string;
    protected variable_decl_function_local(var_: SPIRVariable): string;
    protected variable_decl_is_remapped_storage(var_: SPIRVariable, storage: StorageClass): boolean;
    protected to_func_call_arg(arg: SPIRFunctionParameter, id: number): string;
    protected is_non_native_row_major_matrix(id: number): boolean;
    protected member_is_non_native_row_major_matrix(type: SPIRType, index: number): boolean;
    protected member_is_remapped_physical_type(type: SPIRType, index: number): boolean;
    protected member_is_packed_physical_type(type: SPIRType, index: number): boolean;
    protected convert_row_major_matrix(exp_str: string, exp_type: SPIRType, physical_type_id: number, is_packed: boolean): string;
    protected preserve_alias_on_reset(id: number): void;
    protected reset_name_caches(): void;
    protected emit_struct(type: SPIRType): void;
    protected emit_resources(): void;
    protected emit_extension_workarounds(model: ExecutionModel): void;
    protected emit_buffer_block_native(var_: SPIRVariable): void;
    protected emit_buffer_reference_block(type_id: number, forward_declaration: boolean): void;
    protected emit_declared_builtin_block(storage: StorageClass, model: ExecutionModel): void;
    protected should_force_emit_builtin_block(storage: StorageClass): boolean;
    protected emit_push_constant_block_glsl(var_: SPIRVariable): void;
    protected emit_interface_block(var_: SPIRVariable): void;
    protected constant_value_macro_name(id: number): string;
    protected get_constant_mapping_to_workgroup_component(c: SPIRConstant): number;
    emit_constant(constant: SPIRConstant): void;
    protected emit_specialization_constant_op(constant: SPIRConstantOp): void;
    protected emit_continue_block(continue_block: number, follow_true_block: boolean, follow_false_block: boolean): string;
    protected attempt_emit_loop_header(block: SPIRBlock, method: SPIRBlockMethod): boolean;
    protected branch_to_continue(from: BlockID, to: BlockID): void;
    protected branch(from: BlockID, to: BlockID): any;
    protected branch(from: BlockID, cond: number, true_block: BlockID, false_block: BlockID): any;
    protected _branch(from: BlockID, to: BlockID): void;
    protected _branchTrueFalse(from: BlockID, cond: number, true_block: BlockID, false_block: BlockID): void;
    protected flush_phi(from: BlockID, to: BlockID): void;
    protected flush_variable_declaration(id: number): void;
    protected flush_undeclared_variables(block: SPIRBlock): void;
    protected emit_variable_temporary_copies(var_: SPIRVariable): void;
    protected should_dereference(id: number): boolean;
    protected should_forward(id: number): boolean;
    protected to_trivial_mix_op(type: SPIRType, left: number, right: number, lerp: number): string;
    protected emit_binary_func_op(result_type: number, result_id: number, op0: number, op1: number, op: string): void;
    protected emit_unary_func_op(result_type: number, result_id: number, op0: number, op: string): void;
    protected emit_binary_op(result_type: number, result_id: number, op0: number, op1: number, op: string): void;
    protected emit_unary_func_op_cast(result_type: number, result_id: number, op0: number, op: string, input_type: SPIRTypeBaseType, expected_result_type: SPIRTypeBaseType): void;
    protected emit_binary_func_op_cast(result_type: number, result_id: number, op0: number, op1: number, op: string, input_type: SPIRTypeBaseType, skip_cast_if_equal_type: boolean): void;
    protected emit_binary_op_cast(result_type: number, result_id: number, op0: number, op1: number, op: string, input_type: SPIRTypeBaseType, skip_cast_if_equal_type: boolean): void;
    protected binary_op_bitcast_helper(props: {
        cast_op0: string;
        cast_op1: string;
        input_type: SPIRTypeBaseType;
    }, op0: number, op1: number, skip_cast_if_equal_type: boolean): SPIRType;
    protected emit_complex_bitcast(result_type: number, id: number, op0: number): boolean;
    protected to_ternary_expression(restype: SPIRType, select: number, true_value: number, false_value: number): string;
    protected emit_unary_op(result_type: number, result_id: number, op0: number, op: string): void;
    protected expression_is_forwarded(id: number): boolean;
    protected expression_suppresses_usage_tracking(id: number): boolean;
    protected expression_read_implies_multiple_reads(id: number): boolean;
    protected emit_op(result_type: number, result_id: number, rhs: string, forwarding: boolean, suppress_usage_tracking?: boolean): SPIRExpression;
    protected access_chain_internal_append_index(expr: string, base: number, type: SPIRType, flags: AccessChainFlags, access_chain_is_arrayed: boolean, index: number): string;
    protected access_chain_internal(base: number, indices: number[] | Uint32Array, count: number, flags: AccessChainFlags, meta: AccessChainMeta): string;
    protected get_expression_effective_storage_class(ptr: number): StorageClass;
    protected access_chain_needs_stage_io_builtin_translation(_: number): boolean;
    protected prepare_access_chain_for_scalar_access(expr: string, type: SPIRType, storage: StorageClass, is_packed: boolean): string;
    protected access_chain(base: number, indices: Uint32Array, count: number, target_type: SPIRType, meta?: AccessChainMeta, ptr_chain?: boolean): string;
    protected flattened_access_chain(base: number, indices: Uint32Array | Array<number>, count: number, target_type: SPIRType, offset: number, matrix_stride: number, _array_stride: number, need_transpose: boolean): string;
    protected flattened_access_chain_struct(base: number, indices: Uint32Array | Array<number>, count: number, target_type: SPIRType, offset: number): string;
    protected flattened_access_chain_matrix(base: number, indices: Uint32Array | Array<number>, count: number, target_type: SPIRType, offset: number, matrix_stride: number, need_transpose: boolean): string;
    protected flattened_access_chain_vector(base: number, indices: Uint32Array | Array<number>, count: number, target_type: SPIRType, offset: number, matrix_stride: number, need_transpose: boolean): string;
    protected flattened_access_chain_offset(basetype: SPIRType, indices: Uint32Array | Array<number>, count: number, offset: number, word_stride: number, out?: {
        need_transpose: boolean;
        matrix_stride: number;
        array_stride: number;
    }, ptr_chain?: boolean): Pair<string, number>;
    protected index_to_swizzle(index: number): string;
    protected remap_swizzle(out_type: SPIRType, input_components: number, expr: string): string;
    protected declare_temporary(result_type: number, result_id: number): string;
    protected emit_uninitialized_temporary(result_type: number, result_id: number): void;
    protected emit_uninitialized_temporary_expression(type: number, id: number): SPIRExpression;
    protected append_global_func_args(func: SPIRFunction, index: number, arglist: string[]): void;
    protected to_non_uniform_aware_expression(id: number): string;
    protected to_expression(id: number, register_expression_read?: boolean): string;
    protected to_composite_constructor_expression(id: number, uses_buffer_offset: boolean): string;
    protected to_rerolled_array_expression(base_expr: string, type: SPIRType): string;
    protected to_enclosed_expression(id: number, register_expression_read?: boolean): string;
    protected to_unpacked_expression(id: number, register_expression_read?: boolean): string;
    protected to_enclosed_unpacked_expression(id: number, register_expression_read?: boolean): string;
    protected to_dereferenced_expression(id: number, register_expression_read?: boolean): string;
    protected to_pointer_expression(id: number, register_expression_read?: boolean): string;
    protected to_enclosed_pointer_expression(id: number, register_expression_read?: boolean): string;
    protected to_extract_component_expression(id: number, index: number): string;
    protected enclose_expression(expr: string): string;
    protected dereference_expression(expr_type: SPIRType, expr: string): string;
    protected address_of_expression(expr: string): string;
    protected strip_enclosed_expression(expr: string): string;
    protected to_member_name(type: SPIRType, index: number): string;
    to_member_reference(_: number, type: SPIRType, index: number, __: boolean): string;
    protected to_multi_member_reference(type: SPIRType, indices: number[] | Uint32Array): string;
    protected type_to_glsl_constructor(type: SPIRType): string;
    protected argument_decl(arg: SPIRFunctionParameter): string;
    protected to_qualifiers_glsl(id: number): string;
    protected fixup_io_block_patch_qualifiers(var_: SPIRVariable): void;
    protected emit_output_variable_initializer(var_: SPIRVariable): void;
    protected to_precision_qualifiers_glsl(id: number): string;
    protected to_storage_qualifiers_glsl(var_: SPIRVariable): string;
    protected flags_to_qualifiers_glsl(type: SPIRType, flags: Bitset): string;
    protected format_to_glsl(format: ImageFormat): string;
    protected layout_for_member(type: SPIRType, index: number): string;
    protected to_interpolation_qualifiers(flags: Bitset): string;
    protected layout_for_variable(var_: SPIRVariable): string;
    protected to_combined_image_sampler(image_id: VariableID, samp_id: VariableID): string;
    protected skip_argument(id: number): boolean;
    protected emit_array_copy(lhs: string, _: number, rhs_id: number, __: StorageClass, ___: StorageClass): void;
    protected emit_block_hints(block: SPIRBlock): void;
    protected to_initializer_expression(var_: SPIRVariable): string;
    protected to_zero_initialized_expression(type_id: number): string;
    protected type_can_zero_initialize(type: SPIRType): boolean;
    protected buffer_is_packing_standard(type: SPIRType, packing: BufferPackingStandard, failed_validation_index?: number[], start_offset?: number, end_offset?: number): boolean;
    protected buffer_to_packing_standard(type: SPIRType, support_std430_without_scalar_layout: boolean): string;
    protected type_to_packed_base_size(type: SPIRType, _: BufferPackingStandard): number;
    protected type_to_packed_alignment(type: SPIRType, flags: Bitset, packing: BufferPackingStandard): number;
    protected type_to_packed_array_stride(type: SPIRType, flags: Bitset, packing: BufferPackingStandard): number;
    protected type_to_packed_size(type: SPIRType, flags: Bitset, packing: BufferPackingStandard): number;
    protected bitcast_glsl_op(out_type: SPIRType, in_type: SPIRType): string;
    protected bitcast_glsl(result_type: SPIRType, argument: number): string;
    protected bitcast_expression(target_type: SPIRTypeBaseType, args: number): string;
    protected bitcast_expression(target_type: SPIRType, expr_type: SPIRTypeBaseType, expr: string): string;
    protected build_composite_combiner(return_type: number, elems: Array<number> | Uint32Array, length: number): string;
    protected remove_duplicate_swizzle(op: string): string;
    protected remove_unity_swizzle(base: number, op: string): string;
    protected replace_illegal_names(keywords_?: Set<string>): void;
    protected emit_entry_point_declarations(): void;
    protected replace_fragment_output(var_: SPIRVariable): void;
    protected replace_fragment_outputs(): void;
    protected legacy_tex_op(op: string, imgtype: SPIRType, tex: number): string;
    protected load_flattened_struct(basename: string, type: SPIRType): string;
    protected to_flattened_struct_member(basename: string, type: SPIRType, index: number): string;
    protected store_flattened_struct(lhs_id: number, value: number): any;
    protected store_flattened_struct(basename: string, rhs: number, type: SPIRType, indices: Array<number> | Uint32Array): any;
    protected to_flattened_access_chain_expression(id: number): string;
    protected track_expression_read(id: number): void;
    protected request_workaround_wrapper_overload(id: TypeID): void;
    protected rewrite_load_for_wrapped_row_major(expr: string, loaded_type: TypeID, ptr: ID): string;
    protected is_legacy(): boolean;
    protected is_legacy_es(): boolean;
    protected is_legacy_desktop(): boolean;
    protected register_impure_function_call(): void;
    protected register_control_dependent_expression(expr: number): void;
    protected args_will_forward(id: number, args: Uint32Array | number[], num_args: number, pure: boolean): boolean;
    protected register_call_out_argument(id: number): void;
    protected pls_decl(var_: PlsRemap): string;
    protected to_pls_qualifiers_glsl(variable: SPIRVariable): string;
    protected emit_pls(): void;
    protected remap_pls_variables(): void;
    protected location_is_framebuffer_fetch(location: number): boolean;
    protected location_is_non_coherent_framebuffer_fetch(location: number): boolean;
    protected subpass_input_is_framebuffer_fetch(id: number): boolean;
    emit_inout_fragment_outputs_copy_to_subpass_inputs(): void;
    find_subpass_input_by_attachment_index(index: number): SPIRVariable;
    find_color_output_by_location(location: number): SPIRVariable;
    protected add_variable(variables_primary: Set<string>, variables_secondary: Set<string>, name: string): string;
    protected check_function_call_constraints(args: Array<number> | Uint32Array, length: number): void;
    protected handle_invalid_expression(id: number): void;
    private init;
    compile(): string;
    protected find_static_extensions(): void;
    protected emit_for_loop_initializers(block: SPIRBlock): string;
    protected emit_while_loop_initializers(block: SPIRBlock): void;
    protected for_loop_initializers_are_same_type(block: SPIRBlock): boolean;
    protected optimize_read_modify_write(type: SPIRType, lhs: string, rhs: string): boolean;
    protected fixup_image_load_store_access(): void;
    protected type_is_empty(type: SPIRType): boolean;
    protected declare_undefined_values(): void;
    protected can_use_io_location(storage: StorageClass, block: boolean): boolean;
    protected convert_half_to_string(c: SPIRConstant, col: number, row: number): string;
    protected convert_float_to_string(c: SPIRConstant, col: number, row: number): string;
    protected convert_double_to_string(c: SPIRConstant, col: number, row: number): string;
    protected convert_separate_image_to_expression(id: number): string;
    protected cast_to_variable_store(target_id: number, expr: string, expr_type: SPIRType): string;
    protected cast_from_variable_load(source_id: number, expr: string, expr_type: SPIRType): string;
    protected unroll_array_from_complex_load(target_id: number, source_id: number, expr: string): string;
    protected unroll_array_to_complex_store(target_id: number, source_id: number): boolean;
    protected convert_non_uniform_expression(expr: string, ptr_id: number): string;
    protected disallow_forwarding_in_expression_chain(expr: SPIRExpression): void;
    protected handle_store_to_invariant_variable(store_id: number, value_id: number): void;
    protected expression_is_constant_null(id: number): boolean;
    protected expression_is_non_value_type_array(ptr: number): boolean;
    protected emit_store_statement(lhs_expression: number, rhs_expression: number): void;
    protected get_integer_width_for_instruction(instr: Instruction): number;
    protected get_integer_width_for_glsl_instruction(op: GLSLstd450, ops: Uint32Array, length: number): number;
    protected variable_is_lut(var_: SPIRVariable): boolean;
    protected fixup_type_alias(): void;
    protected reorder_type_alias(): void;
    protected vector_swizzle(vecsize: number, index: number): string;
}
export {};
