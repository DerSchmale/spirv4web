import { Compiler } from "../Compiler";
import { ParsedIR } from "../../parser/ParsedIR";
import { LocationComponentPair } from "../../common/LocationComponentPair";
import { BuiltIn } from "../../spirv";
import { Pair } from "../../utils/Pair";
import { BackendVariations } from "./glsl";
import { PlsRemap } from "./PlsRemap";
import { GLSLOptions } from "./GLSLOptions";
export declare class CompilerGLSL extends Compiler {
    protected backend: BackendVariations;
    protected flattened_buffer_blocks: Set<number>;
    protected forced_extensions: string[];
    protected pls_inputs: PlsRemap[];
    protected pls_outputs: PlsRemap[];
    protected subpass_to_framebuffer_fetch_attachment: Pair<number, number>[];
    protected inout_color_attachments: Pair<number, boolean>[];
    protected masked_output_locations: Set<LocationComponentPair>;
    protected masked_output_builtins: Set<number>;
    private options;
    private current_locale_radix_character;
    constructor(parsedIR: ParsedIR);
    remap_pixel_local_storage(inputs: PlsRemap[], outputs: PlsRemap[]): void;
    remap_ext_framebuffer_fetch(input_attachment_index: number, color_location: number, coherent: boolean): void;
    get_common_options(): GLSLOptions;
    require_extension(ext: string): void;
    flatten_buffer_block(id: VariableID): void;
    mask_stage_output_by_location(location: number, component: number): void;
    mask_stage_output_by_builtin(builtin: BuiltIn): void;
    protected has_extension(ext: string): boolean;
    protected require_extension_internal(ext: string): void;
    protected is_legacy(): boolean;
    protected is_legacy_es(): boolean;
    protected is_legacy_desktop(): boolean;
    protected remap_pls_variables(): void;
    private init;
    compile(): string;
    protected fixup_type_alias(): void;
    reorder_type_alias(): void;
}
