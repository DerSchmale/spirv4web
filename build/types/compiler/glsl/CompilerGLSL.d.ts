import { Compiler } from "../Compiler";
import { ParsedIR } from "../../parser/ParsedIR";
import { LocationComponentPair } from "../../common/LocationComponentPair";
import { BuiltIn, StorageClass } from "../../spirv";
import { Pair } from "../../utils/Pair";
import { SPIRVariable } from "../../common/SPIRVariable";
import { SPIRType, SPIRTypeBaseType } from "../../common/SPIRType";
import { BackendVariations } from "./glsl";
import { PlsRemap } from "./PlsRemap";
import { GLSLOptions } from "./GLSLOptions";
import { StringStream } from "../../utils/StringStream";
import { SPIRConstant } from "../../common/SPIRConstant";
import { Bitset } from "../../common/Bitset";
export declare class CompilerGLSL extends Compiler {
    protected buffer: StringStream;
    protected redirect_statement: string[];
    protected backend: BackendVariations;
    protected indent: number;
    protected flattened_buffer_blocks: Set<number>;
    protected flattened_structs: boolean[];
    protected expression_usage_counts: number[];
    protected forced_extensions: string[];
    protected statement_count: number;
    protected requires_transpose_2x2: boolean;
    protected requires_transpose_3x3: boolean;
    protected requires_transpose_4x4: boolean;
    protected pls_inputs: PlsRemap[];
    protected pls_outputs: PlsRemap[];
    protected subpass_to_framebuffer_fetch_attachment: Pair<number, number>[];
    protected inout_color_attachments: Pair<number, boolean>[];
    protected masked_output_locations: Set<LocationComponentPair>;
    protected masked_output_builtins: Set<number>;
    private options;
    constructor(parsedIR: ParsedIR);
    remap_pixel_local_storage(inputs: PlsRemap[], outputs: PlsRemap[]): void;
    remap_ext_framebuffer_fetch(input_attachment_index: number, color_location: number, coherent: boolean): void;
    get_common_options(): GLSLOptions;
    require_extension(ext: string): void;
    flatten_buffer_block(id: VariableID): void;
    mask_stage_output_by_location(location: number, component: number): void;
    mask_stage_output_by_builtin(builtin: BuiltIn): void;
    protected has_extension(ext: string): boolean;
    protected require_extension_internal(ext: string): void;
    protected unpack_expression_type(expr_str: string, _0: SPIRType, _1: number, _2: boolean, _3: boolean): string;
    protected statement_inner(...args: any[]): void;
    protected type_to_glsl(type: SPIRType, id?: number): string;
    builtin_to_glsl(builtin: BuiltIn, storage: StorageClass): string;
    protected image_type_glsl(type: SPIRType, id?: number): string;
    constant_expression(c: SPIRConstant): string;
    protected constant_expression_vector(c: SPIRConstant, vector: number): string;
    protected statement(...args: any[]): void;
    protected type_to_array_glsl(type: SPIRType): string;
    protected to_array_size(type: SPIRType, index: number): string;
    protected variable_decl(type: SPIRType, name: string, id: number): any;
    protected variable_decl(variable: SPIRVariable): string;
    protected variable_decl_is_remapped_storage(var_: SPIRVariable, storage: StorageClass): boolean;
    protected convert_row_major_matrix(exp_str: string, exp_type: SPIRType, physical_type_id: number, is_packed: boolean): string;
    protected get_constant_mapping_to_workgroup_component(c: SPIRConstant): number;
    protected expression_is_forwarded(id: number): boolean;
    protected expression_suppresses_usage_tracking(id: number): boolean;
    protected expression_read_implies_multiple_reads(id: number): boolean;
    protected index_to_swizzle(index: number): string;
    protected remap_swizzle(out_type: SPIRType, input_components: number, expr: string): string;
    protected to_expression(id: number, register_expression_read?: boolean): string;
    protected to_enclosed_expression(id: number, register_expression_read?: boolean): string;
    protected to_unpacked_expression(id: number, register_expression_read?: boolean): string;
    protected enclose_expression(expr: string): string;
    protected strip_enclosed_expression(expr: string): string;
    protected to_member_name(type: SPIRType, index: number): string;
    protected type_to_glsl_constructor(type: SPIRType): string;
    protected to_qualifiers_glsl(id: number): string;
    protected to_precision_qualifiers_glsl(id: number): string;
    protected to_storage_qualifiers_glsl(var_: SPIRVariable): string;
    protected flags_to_qualifiers_glsl(type: SPIRType, flags: Bitset): string;
    protected to_interpolation_qualifiers(flags: Bitset): string;
    protected to_initializer_expression(var_: SPIRVariable): string;
    protected to_zero_initialized_expression(type_id: number): string;
    protected type_can_zero_initialize(type: SPIRType): boolean;
    protected bitcast_glsl_op(out_type: SPIRType, in_type: SPIRType): string;
    protected bitcast_expression(target_type: SPIRTypeBaseType, args: number): string;
    protected bitcast_expression(target_type: SPIRType, expr_type: SPIRTypeBaseType, expr: string): string;
    protected remove_duplicate_swizzle(op: string): string;
    protected load_flattened_struct(basename: string, type: SPIRType): string;
    protected to_flattened_struct_member(basename: string, type: SPIRType, index: number): string;
    protected track_expression_read(id: number): void;
    protected is_legacy(): boolean;
    protected is_legacy_es(): boolean;
    protected is_legacy_desktop(): boolean;
    protected remap_pls_variables(): void;
    protected location_is_framebuffer_fetch(location: number): boolean;
    protected location_is_non_coherent_framebuffer_fetch(location: number): boolean;
    protected subpass_input_is_framebuffer_fetch(id: number): boolean;
    emit_inout_fragment_outputs_copy_to_subpass_inputs(): void;
    find_subpass_input_by_attachment_index(index: number): SPIRVariable;
    find_color_output_by_location(location: number): SPIRVariable;
    handle_invalid_expression(id: number): void;
    private init;
    compile(): string;
    protected find_static_extensions(): void;
    protected fixup_image_load_store_access(): void;
    protected convert_half_to_string(c: SPIRConstant, col: number, row: number): string;
    protected convert_float_to_string(c: SPIRConstant, col: number, row: number): string;
    protected convert_double_to_string(c: SPIRConstant, col: number, row: number): string;
    protected fixup_type_alias(): void;
    protected reorder_type_alias(): void;
    protected vector_swizzle(vecsize: number, index: number): string;
}
